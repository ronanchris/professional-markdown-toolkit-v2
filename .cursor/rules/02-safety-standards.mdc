---
description: "Safety standards, security requirements, testing protocols, and code quality rules"
alwaysApply: true
---

# Safety Standards & Security Requirements

## Core Safety Rules
- NEVER modify destructive scripts without implementing backup functionality
- ALWAYS test script changes with dry-run modes when available
- PRESERVE all YAML frontmatter, Obsidian embeds ([[links]]), and block references (^block-id)
- VALIDATE file paths use relative resolution, never hardcoded absolute paths

## Code Standards
- Shell scripts: Use `set -e` and `set -u`, include proper error handling
- Python scripts: Include dependency checks, handle encoding properly
- All scripts: Include backup integration from shared/backup-functions.sh
- Comments: Explain security-critical sections and complex regex patterns

## Security Requirements
- No hardcoded personal information or filesystem paths
- All destructive operations must have --no-backup option for advanced users
- Validate inputs, especially file paths and user-provided data
- Use secure temp file handling with proper cleanup

## Testing Approach
- Create test cases in docs/examples/ for new functionality
- Test with both valid and edge-case inputs
- Verify backup and restore procedures work correctly
- Document any platform-specific behavior

## Quality Standards
- Professional-grade error messages with clear recovery instructions
- Comprehensive help text for all scripts
- Cross-platform compatibility (macOS, Linux, WSL)
- Enterprise-ready backup and logging systems

## Documentation Requirements
- Keep session-continuity/ documents updated when making significant changes
- Update PROJECT-SECURITY-PLAN.md when completing tasks or discovering issues
- Maintain before/after examples in docs/examples/ when adding new functionality
- Use consistent markdown formatting (headings with spaces: `# Heading`)

## Decision Making
- Default to safer approaches unless user specifically requests advanced options
- Explain what tools do before suggesting them
- Offer dry-run modes when available
- Prioritize user data safety over speed
