# Obsidian AI Tools - Universal Cursor Rules

## Date Validation Protocol (CRITICAL)
BEFORE adding ANY timestamp or date reference:
1. Ask user: "Let me confirm - today's date is [SUSPECTED DATE], correct?"
2. Wait for user confirmation before proceeding
3. Use confirmed date in all timestamps
4. Never assume dates - always validate with user

## Template Customization Protocol (CRITICAL)
When user opens any file with "ðŸ¤– AI CUSTOMIZATION TRIGGER" comment block at the top:
1. Automatically offer to help customize the template through guided interview
2. Use the specific interview questions provided in the comment block
3. After interview, comment out the trigger block and populate the template
4. Confirm customization is complete before proceeding with other tasks

This system ensures new users get guided setup instead of intimidating blank templates.

## Project Context
This toolkit provides production-ready tools for Obsidian vault management and markdown processing with comprehensive security and backup systems.

## Core Safety Rules
- NEVER modify destructive scripts without implementing backup functionality
- ALWAYS test script changes with dry-run modes when available
- PRESERVE all YAML frontmatter, Obsidian embeds ([[links]]), and block references (^block-id)
- VALIDATE file paths use relative resolution, never hardcoded absolute paths

## Code Standards
- Shell scripts: Use `set -e` and `set -u`, include proper error handling
- Python scripts: Include dependency checks, handle encoding properly
- All scripts: Include backup integration from shared/backup-functions.sh
- Comments: Explain security-critical sections and complex regex patterns

## Documentation Requirements
- Keep session-continuity/ documents updated when making significant changes
- Update PROJECT-SECURITY-PLAN.md when completing tasks or discovering issues
- Maintain before/after examples in docs/examples/ when adding new functionality
- Use consistent markdown formatting (headings with spaces: `# Heading`)

## Working Style Preferences
- Prefer rapid iteration over extensive planning
- Question timeline assumptions - ask "could we do this faster?"
- Challenge approaches when you see better alternatives
- Focus on working examples over theoretical explanations
- Document deviations from plans using DEVIATION-TRACKING-PROTOCOL.md template

## Security Requirements
- No hardcoded personal information or filesystem paths
- All destructive operations must have --no-backup option for advanced users
- Validate inputs, especially file paths and user-provided data
- Use secure temp file handling with proper cleanup

## Testing Approach
- Create test cases in docs/examples/ for new functionality
- Test with both valid and edge-case inputs
- Verify backup and restore procedures work correctly
- Document any platform-specific behavior

## Session Management - AUTOMATED SYSTEM
- **AUTO-TRIGGER**: Every session start â†’ Check session-continuity/SESSION-PLAN.md exists
- **If NO PLAN**: Offer to create via AI interview with date validation
- **If PLAN EXISTS**: Load and focus on current phase (SESSION LENS: 4-6 items max)
- **NEW AI COLLABORATORS**: Use session-continuity/SESSION-ENTRANCE-PROMPT.md for complete context
- **COMPLETION DETECTION**: Auto-check SESSION-PLAN.md when tasks complete
- **DEVIATION MONITORING**: Auto-document when approach changes (with date validation)
- **SESSION END**: Auto-archive to SESSION-PLAN-ARCHIVE/ and update snapshots

### Auto-Checkbox Triggers (Session Lens Scope Only):
```
"That's complete" â†’ Check off related item in current session focus
"We've finished X" â†’ Check off X (if in active 4-6 items)
"Done with Y" â†’ Check off Y (session lens scope only)
"Successfully implemented" â†’ Mark implementation complete
```

### Deviation Detection Phrases:
```
"Actually, let's..." â†’ DEVIATION DETECTED â†’ Auto-document with date validation
"Change of plan..." â†’ DEVIATION DETECTED â†’ Update SESSION-PLAN.md deviations
"Better approach..." â†’ DEVIATION DETECTED â†’ Cascade update to tracking docs
```

### Session End Indicators:
```
"Let's wrap up" â†’ Auto-archive current plan â†’ Update CURRENT-STATE-SNAPSHOT.md
"Session complete" â†’ Validate timestamps â†’ Prepare for next session
```

### Implementation Gap Detection:
```
"If the system were working, wouldn't X happen?" â†’ IMPLEMENTATION GAP DETECTED
"Did you just do X because I asked, or is that automatic?" â†’ IMPLEMENTATION GAP DETECTED
"I don't see Y having been updated" â†’ IMPLEMENTATION GAP DETECTED

**AUTO-RESPONSE:**
1. Acknowledge the gap between design and implementation
2. Update SESSION-PLAN.md with new deviation
3. Add corrective phase to plan if needed
4. Update all relevant cursor rules and documentation
5. Test whether the fix actually works automatically
```

## Session Prompt Management - HISTORICAL TRACKING SYSTEM
**CRITICAL**: Session prompts are now organized with historical tracking and reusable templates.

### **Auto-Prompt Structure Awareness**:
```
**PRIMARY LOCATION**: session-continuity/prompts/ folder
**NAVIGATION FILE**: session-continuity/prompts/index.md (AI navigation guide)
**NAMING CONVENTION**: YYYY-MM-DD-session-NN-description.md (newest first)
**TEMPLATES FOLDER**: session-continuity/prompts/templates/ (reusable patterns)
**METADATA**: Each prompt has YAML frontmatter with session_id, date, type, tags, status
```

### **Session Prompt Usage Protocol**:
```
**FOR NEW SESSIONS**:
1. Always check prompts/index.md first for latest prompts
2. Use most recent session prompt that matches current context
3. Fall back to templates/ for general patterns
4. When creating new prompts, follow naming: YYYY-MM-DD-session-NN-description.md

**PROMPT SELECTION GUIDE**:
- **Urgent Issues**: Use latest deployment/troubleshooting prompt
- **New Features**: Use session management or foundation prompts  
- **Complex Problems**: Use templates/problem-solving.md
- **Timeline Pressure**: Use templates/timeline-reality-check.md
- **Implementation Gaps**: Use templates/implementation-gap-detection.md
```

### **Historical Context Integration**:
```
**WHEN REFERENCING PROMPTS**:
- Reference specific session files by name and date
- Update prompt effectiveness metrics in session files
- Track which prompts solve real problems vs theoretical ones
- Maintain chronological progression of collaboration improvements
```

## Session Context Awareness - COMPREHENSIVE LOADING
**CRITICAL**: Every new session MUST check these documents in order for complete context:

### **Primary Context Documents** (Check at session start):
1. **PROJECT-INSTRUCTIONS.md** (if exists) - Comprehensive AI context for this specific project
2. **session-continuity/SESSION-PLAN.md** - Current goals and active tasks (SESSION LENS: 4-6 items)
3. **session-continuity/CURRENT-STATE-SNAPSHOT.md** - Latest project status and achievements
4. **CURRENT-PROJECT-CONTEXT.md** (project root) - Basic project information
5. **COLLABORATION-STYLE.md** - Communication and working preferences  
6. **PROBLEM-SOLVING-METHODS.md** - Project-specific problem-solving approaches

### **Session Loading Protocol**:
```
NEW SESSION DETECTED â†’ 
1. Load PRIMARY CONTEXT DOCUMENTS (above list)
2. If PROJECT-INSTRUCTIONS.md exists â†’ This is the master context document, prioritize it
3. If session-continuity/SESSION-PLAN.md exists â†’ Focus on current active items only
4. If no key context â†’ Offer to create using interview system
5. Confirm context loaded: "I've loaded your project context. Current focus: [SESSION LENS items]"
```

### **Context Maintenance**:
- Update project context as work progresses
- Mark SESSION-PLAN.md items complete when tasks finish
- Document deviations and new insights in real-time

## Obsidian Integration
- Preserve WikiLink format: [[internal-links]]
- Maintain Templater syntax when not explicitly removing it
- Keep tag formats: #tag and #nested/tag
- Respect vault folder structures and conventions

## Quality Standards
- Professional-grade error messages with clear recovery instructions
- Comprehensive help text for all scripts
- Cross-platform compatibility (macOS, Linux, WSL)
- Enterprise-ready backup and logging systems

## Universal AI Collaboration Style
- Provide honest feedback and challenge approaches when you see better alternatives
- Question timeline assumptions - ask "could we do this faster?" when appropriate  
- Focus on working examples over theoretical explanations
- Prefer rapid iteration with feedback loops over extensive upfront planning
- Value authentic interaction over diplomatic politeness
- Encourage meta-conversation about improving the collaboration itself

## Problem-Solving Approach
- Use "surgical approach" - listen for user expertise about likely root causes
- Test specific hypotheses rather than trying to fix everything at once
- Validate solutions with real user data/scenarios, not artificial examples
- Break complex problems into testable components
- Think beyond immediate problem to reusable solutions when appropriate

## File Operations Safety
- Always preserve YAML frontmatter and Obsidian syntax
- Obey selection scope when editing files
- Create backups before destructive operations
- Provide clear restoration instructions after changes

## Decision Making
- Default to safer approaches unless user specifically requests advanced options
- Explain what tools do before suggesting them
- Offer dry-run modes when available
- Prioritize user data safety over speed

## Blog Learning Moments - AUTO-CREATION SYSTEM
### Automatic Blog Post Triggers:
When the following occurs, automatically offer to create blog post in BLOG-LEARNING-MOMENTS.md:

**Innovation Triggers:**
- User suggests brilliant strategic improvement (like AI interview system)
- Breakthrough in AI collaboration methodology discovered
- User identifies critical implementation gap
- New pattern or framework emerges from conversation
- Meta-learning moment about AI collaboration itself

**Auto-Prompt When Triggered:**
"This insight about [specific innovation] seems like it could help other people building AI collaboration systems. Should I add it to BLOG-LEARNING-MOMENTS.md as a new learning moment? I can structure it with the challenge, solution, and why it matters for others."

**IMPORTANT: Always validate date before adding blog post timestamps**

**Blog Post Structure:**
```markdown
## [Title]: [Brief Description]
*Session [N] - [USER CONFIRMED DATE]*

### The Challenge
[What problem did we encounter?]

### The Solution
[What did we build/discover?]

### Why This Matters for Others
[Universal applicability and lessons]

### The Meta-Learning
[What this teaches about AI collaboration itself]
```

## Success Indicators
- Real progress on actual user problems
- Solutions that work reliably in practice
- Efficient collaboration without repetitive explanations
- Both parties feel challenged and engaged (not just served/serving)
- Continuous improvement in working relationship and results

## Toolkit-Specific Rules
- All markdown processing tools create automatic backups
- Notion import tools should be suggested for import problems
- Project structure generator for documentation needs
- Template tools for Obsidian workflow management
- AI collaboration templates for enhanced partnerships 